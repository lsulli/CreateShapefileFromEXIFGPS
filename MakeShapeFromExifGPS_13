#ver 1.13 - 2019.12.21
#script to add gps data from gpx to photo (geottaging) and create point shapefile with selected exif attribute 
#WARNING: ERASE EXISTING EXIF GEOTAG DATA
#copy in image directory and run, output shapefile will be create in the same directory
#Request:
# python 3x
#exiftool.exe - http://www.sno.phy.queensu.ca/~phil/exiftool/
#exiftool.py - https://github.com/smarnach/pyexiftool/blob/master/exiftool.py
#shapefile.py - https://github.com/GeospatialPython/pyshp
#

import shapefile #copy shapefile.py in ./python3x/lib
import os
import exiftool #copy exiftool.py in ./python3x/lib
import sys
import zipfile
from subprocess import call

# exiftool.exe full path
exiftoolpath = "C:\exiftool\exiftool.exe"

if os.path.exists(exiftoolpath):
	exiftool.executable = exiftoolpath
else:
	print('Controllare la path di installazione di exiftool.exe')
	sys.exit()
	
mydir ='.'

xGPSDate = "999"

#---------- START Comment this code to preserve gps data in exif -------------

# extract gpx file from zip if exist
for root, dirs, files in os.walk(mydir):
        for name in files: 
                f = os.path.join(root, name)
                if  name.endswith(".ZIP") or name.endswith(".zip"):
                    with zipfile.ZipFile( f, 'r') as myzip:
                        myzip.extractall(root)
#subprocess call() to execute exiftool batch with gpx file: WARNING overwrite all gps data

call('C:\exiftool\exiftool.exe -overwrite_original_in_place -Comment="" *.jpg')
call('C:\exiftool\exiftool.exe -overwrite_original_in_place -gps:all= .')
call('C:\exiftool\exiftool.exe -overwrite_original_in_place -geotag "*.gpx" -geosync=-0 . ')#-geosync=-0!!!!

#---------- END Comment this code to preserve gps data in exif -------------

#create shapefile structure
w = shapefile.Writer(shapefile.POINT)
w.field('Filename','C','40')
w.field('Path','C','250')
w.field('GPSDate','C','15')
w.field('TimeOrig','C','25')
w.field('GPSLong','C','20')
w.field('GPSLat','C','20')
w.field('GPSMapDatum','C','20')
w.field('GPSDOP','C','20')
w.field('NumSat','C','10')
w.field('FL35mm','C','10')
w.field('STRUMENTO','C','100')
w.field('ImageDir','C','3')
w.field('GPSElev','C','4')

#manage input current directory 

mydir='.'

absmydir=os.path.abspath(mydir)

mylistfiles = []
for myfiles in os.listdir(mydir):
	if myfiles.endswith(".JPG") or myfiles.endswith(".jpg"):
		mylistfiles.append(myfiles)

with exiftool.ExifTool() as et:
	try:
		metadata = et.get_metadata_batch(mylistfiles)
	except:
		metadata = []
for d in metadata:
	#run only with file with lat and long data
	try:
		mylongdd=(d["EXIF:GPSLongitude"])
	except:
		mylongdd=0
	try:
		mylatdd=(d["EXIF:GPSLatitude"])
	except:
		mylatdd = 0
	if mylongdd > 0 and mylatdd > 0:
		xFilename=str(d["SourceFile"])
		pathtot=absmydir+"/"+ str(d["SourceFile"])
		try:
			xGPSDate=str(d["EXIF:GPSDateStamp"])
		except:
			xGPSDate = "999"
		try:
			xGPSImgdir=str(d["EXIF:GPSImgDirection"])
		except:
			xGPSImgdir = "999"
		try:
			xGPSElev=str(d["EXIF:GPSAltitude"])
		except:
			xGPSElev="9999"
		try:
			xTimeOrig=str(d["EXIF:DateTimeOriginal"])
		except:
			xTimeOrig="999"
		try:
			xGPSMapDatum = str(d["EXIF:GPSMapDatum"])
		except:
			xGPSMapDatum = ""
		try:
			xGPSDOP = str(d["EXIF:GPSDOP"])
		except:
			xGPSDOP = "0"
		try:
			xNumSat = str(d["EXIF:GPSSatellites"])
		except:
			xNumSat = "99"
		try:
			xFL35mm = str(d["Composite:FocalLength35efl"])
		except:
			xFL35mm = "999"
		try:
			xSTRUMENTO = str(d["EXIF:Model"])
		except:
			xSTRUMENTO = "999"

		w.point(mylongdd,mylatdd)
		w.record(xFilename,pathtot,xGPSDate,xTimeOrig,mylongdd,mylatdd,xGPSMapDatum,xGPSDOP,xNumSat,xFL35mm,xSTRUMENTO,xGPSImgdir,xGPSElev)

#create name of shapefile from last date in exif file list or wait for input
if xGPSDate != "999":
	sGPSDate=xGPSDate.replace(':','_')#get GPS date of last image in dir
else:
	var = input ("Input date time yyyy_mm_dd:")
	sGPSDate=str(var)
try:
	sf= './GPS_geo_'+sGPSDate
	w.save(sf)
	prjf= open(sf+'.prj','w+')
	prjf.write('GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]]')
	prjf.close()
	print ("Creato il file: "+sf)
except:
	print ("Non sono disponibili dati per creare lo shapefile dei punti di ripresa")
